#!/usr/bin/env python3


import               argparse
import               collections
import               datetime
import               fnmatch
import functools  as ft
import               glob
import os.path    as op
import               os
import               shlex
import               string
import subprocess as sp
import               sys



def note_dir():
    home    = op.expanduser('~')
    default = op.join(home, '.notes')
    notedir = os.environ.get('NOTE_DIR', default)
    return notedir

@ft.lru_cache
def note_files():
    return list(glob.glob(op.join(note_dir(), '**', '*.md'), recursive=True))


def note_index():
    index = {}
    for notefile in note_files():

        keys = op.basename(notefile)
        keys = '.'.join(keys.split('.')[:-1])
        keys = keys.split('-')

        for key in keys:
            if key not in index: index[key] = [notefile]
            else:                index[key].append(notefile)
    return index


def note_file_name(keys):
    topic = sanitise(keys)
    today = datetime.date.today()
    year  = f'{today.year:04d}'
    month = f'{today.month:02d}'
    path  = op.join(note_dir(), year, month, f'{topic}.md')
    return path


def sanitise(keys):
    chars   = []
    key     = '-'.join(keys)
    allowed = string.ascii_letters + string.digits + '-_'
    for c in key:
        if c in allowed: chars.append(c)
        else:            chars.append('-')
    return ''.join(chars)


def find_notes(keys):
    index      = note_index()
    candidates = set()
    for key in keys:
        candidates.update(index.get(key, []))
    return sorted(list(candidates))


def grep_notes(pattern):
    hits = collections.defaultdict(list)
    for notefile in note_files():
        lines = open(notefile, 'rt').read().strip()
        lines = [l.strip() for l in lines.split('\n')]

        for i, line in enumerate(lines, 1):
            if pattern in line: # fnmatch.fnmatch(line, pattern):
                hits[notefile].append((i, line))

    return hits


def prompt_user_to_select_file(keys, candidatepaths, defaultpath):
    print('Note for', ' '.join(keys))
    print('Add note to this file:')
    for i, path in enumerate(candidatepaths, 1):
        print(f' [{i}] {path}')
    print(f'Or press enter to create a new file at {defaultpath}')

    selection = -1

    while True:
        selection = input('Select file: ').strip()

        if selection == '':
            return defaultpath
        try:
            selection = int(selection)
            return candidatepaths[selection - 1]
        except Exception:
            pass


def open_editor(keys, filepath, style='section'):
    newfile = not op.exists(filepath)

    if newfile:
        dirname = op.dirname(filepath)
        if not op.exists(dirname):
            os.makedirs(dirname, exist_ok=True)

    if style == 'section':

        today = datetime.date.today()
        date  = f'{today.year}/{today.month:02d}/{today.day:02d}'

        if newfile: prefix = ''
        else:       prefix = '\n\n'

        with open(filepath, 'at') as f:
            f.write(f'{prefix}# {date} - {" ".join(keys)}\n\n')

    elif style == 'item':
        with open(filepath, 'at') as f:
            f.write(f'\n - {" ".join(keys)}')

    cmd = op.expandvars(f'${{EDITOR}} {filepath}')
    sp.run(shlex.split(cmd), check=True)


def parse_args():
    parser = argparse.ArgumentParser()
    search = parser.add_mutually_exclusive_group()
    parser.add_argument('keys', nargs='+')
    search.add_argument('-f', '--find', action='store_true')
    search.add_argument('-g', '--grep', action='store_true')
    search.add_argument('-t', '--todo', action='store_true')
    return parser.parse_args()


def main():
    args = parse_args()

    if args.todo:
        todo = op.join(note_dir(), 'todo.md')
        open_editor(args.keys, todo, style='item')
        return

    if args.grep:
        hits = grep_notes(' '.join(args.keys))
        for notefile in sorted(hits.keys()):
            print(notefile)
            for lineno, line in hits[notefile]:
                print(f'  {lineno}: {line}')
        return

    related = find_notes(args.keys)

    if args.find:
        for path in related:
            print(path)
        return

    filepath = note_file_name(args.keys)

    if len(related) > 0:
        filepath = prompt_user_to_select_file(args.keys, related, filepath)

    open_editor(args.keys, filepath)


if __name__ == '__main__':
    main()
